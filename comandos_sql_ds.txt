
************************************************************
************ CURSO DE SQL PARA DATA SCIENCE ****************
************************************************************

select
	4 as ColunaNum;

# Exibe o número 4 e muda o nome da coluna para "ColunaNum".

============================================================

select
	4 as Coluna1,
	10 as Coluna2;

# Exibe o número 4 na "Coluna1" e 10 na "Coluna2".

=============================================================

select
	'Conrado' as Nome,		# Cria a coluna "Nome" com o valor "Conrado"
	43 as Idade, 	# Cria a coluna "Idade" com valor "43"
	1.82 as Peso, 	# Cria a coluna "Peso" com valor "1.82"
	5 * 3 as ColunaResult;		# Cria a coluna "Multiplicacao" com o resultado de 5*3 = 15

==============================================================

select
  name
from
  e_commerce.categories;
  
# Exibe todos nomes da coluna "name" do banco de dados "e_commerce" e tabela "categories".

===============================================================

select
	created_at,
	status
from
	e_commerce.orders;
	
# Exibi os dados das colunas "creat_at" e "status" do bd "e_commerce" da tabela "orders".

================================================================

select
	created_at as DataPedido,
	status as Situacao
from
	e_commerce.orders;
	
/*
Exibi os dados da coluna "creat_at" alterando o nome da coluna para "DataPedido",
exibi os dados da coluna "status" alterando o nome da coluna para "Situacao" do
bd "e_commerce" da tabela "orders".
*/

================================================================

select
	id as ID,
from
	e_commerce.items
limit
	5;

# Limita a coluna "id" na quantidade de linhas para 5 da tabela "items".

=================================================================

select
	distinct state as UF,
from
	e_commerce.customers;
	
# Exibe somente os valores únicos da tabela "state" (valores iguais não repetem).

=================================================================

select
	distinct state as UF,
from
	e_commerce.customers
limit
	3;
	
=================================================================

select
	count(distinct state),
from
	e_commerce.customers
	
# Conta a quantidade de regitros da coluna "state".

=================================================================

select
	count(distinct state) as QTDADE_UF,
from
	e_commerce.customers
	
# Conta a quantidade de regitros da coluna "state" renomeando a coluna para "QTDADE_UF"

=================================================================

**** OPERADORES ****

	Lógicos:
NOT --> não
AND --> e
OR --> ou

	Aritméticos:
+ --> soma
- --> subtraçãp
* --> multiplicação
/ --> divisão

	Condição "IS":
IS NULL --> é nulo
IS TRUE --> é verdadeiro
IS FALSE --> é false

	Comparação:
= --> igual
!= --> diferente
> --> maior
< --> menor
<= --> menor ou igual
>= --> maior ou igual
BETWEEN --> entre
LIKE --> como
IN --> está contido

=========================================================

select
	1 = 1,  # true
	5 > 10, # false
	6 < 8,  # true
	2 != 2,  # false
	25 >= 25,  # true
	15 >= 20,  # false
	15 <= 20;  # true

=========================================================

select
	10 between 8 and 12,  # true
	2 between 4 and 9,  # false
	-13 between 0 and 100,	# false
	25 between -0 and -100,	# false
	-5 between -7 and -1,	#true
	-5 between -1 and -7;	#false

=========================================================

select
	*							# Mostra todas as colunas com o filtro "products" entre 30 e 80
from
	e_commerce.products
where
	price between 30 and 80;
	
	-- OU --
	
select
	price						# Mostra somente a coluna "price" com o filtro "products" entre 30 e 80
from
	e_commerce.products
where
	price between 30 and 80;

========================================================

select
	*
from
	e_commerce.customers
where
  first_name like 'Mariana';
  
# Tras todas colunas que tenha no filtro "first_name" a palavra "Mariana".


	--	OU	--
	
select
	*
from
	e_commerce.customers
where
  first_name like 'M%';
  
# Tras todas colunas que tenha no filtro "first_name" a palavra que começa com "M".

	--	OU	--
	
select
	*
from
	e_commerce.customers
where
  first_name like 'r%';
  
# Tras todas colunas que tenha no filtro "first_name" a palavra que termina com "r".

	--	OU	--
	
select
	*
from
	e_commerce.customers
where
  first_name like 'J%' and first_name like '%r';
  
# Tras todas colunas que tenha no filtro "first_name" a palavra que começa com "J" e termina com "r".

	--	OU	--

select
	*
from
	e_commerce.customers
where
  first_name like 'J%r';
  
# Tras todas colunas que tenha no filtro "first_name" a palavra que começa com "J" e termina com "r".


	--	OU	--

select
  customers
from
  e_commerce.customers
where
  first_name like 'Mariana'

========================================================

select
  *
from
  e_commerce.products
where
  price in(10, 11, 15)
  
# Tras todas colunas da tabela "products" quando contiver os valores "10, 11 e 15" na tabela "price".

	--	OU --
	
select
  *
from
  e_commerce.customers
where
  state in('Acre', 'Ceará')
  
# # Tras todas colunas da tabela "customers" quando contiver os valores "Acre" e "Ceará" na tabela "state".

========================================================

# COMANDO "NULL" e "NOT NULL"

select
	*
from
	e_commerce.customers
where street in null;

# Tras todas colunas da tabela "costumers" que tenha campos nulos da coluna "street".

	--	OU--
	
select
	*
from
	e_commerce.customers
where street in not null;

# Tras todas colunas da tabela "costumers" em que os campos da coluna "street" NÃO sejam nulos.


	--	OU	--
	
select
  *
from
  e_commerce.customers
where first_name like 'M%' and street is null;

=========================================================

select
  *
from
  e_commerce.customers
where
  street is not null and email is not null;
  
=========================================================
  
# COMANDO "TRUE", "FALSE", "IS NOT TRUE" (FALSE) e "IS NOT FALSE" (TRUE)

select
	*
from
	bigquery-public-data.chicago_crime.crime
where
	domestic is true;

# Tras todos valores "true" da coluna "crime" da tabela "chicago_crime" do banco de dados "bigquery-public-data".

##### ALIAS ######

# Altera o nome da coluna temporariamente

select
	id as Identificacao,first_name as PrimeiroNome 
from
	e_commerce.customers;

--------------------
	
select
	id as Identificador,
	total_price as ValorTotal
from
	e_commerce.items
	

------------------

select
  p.name as NomeProduto,
  c.name as NomeCategoria
from
  e_commerce.products as p
join
  e_commerce.categories as c
on
  p.category_id = c.id;
  
--------------------

#### COMANDO WHERE ####

select
	quantity
from
	e_commerce.items
where quantity = 1;

---------------------

select
	order_id as PEDIDO, quantity as QTDADE
from
	e_commerce.items
where quantity = 2;

---------------------

select
	customers
from
	e_commerce.customers
where
	state like 'Bahia' and email is not null;
	
---------------------

select
	first_name as PrimeiroNome,last_name as Sobrenome, email as E_Mail,
from
	e_commerce.customers
where
	state like 'Bahia' and first_name like 'Ana' and email is not null;
	
---------------------------------------

select
	first_name as PrimeiroNome,last_name as Sobrenome, email as E_Mail,
from
	e_commerce.customers
where
	state = 'Bahia' and first_name = 'Ana' and email is not null;

---------------------------------------

select
	*
from
	e_commerce.customers
where
	(state = 'Bahia' or state = 'Ceará') and email is not null;
	
# Se não colocar parenteses, a condição fica errada. Após o "or", vira a segunda condição.

#### COMANDO CASE ####

select
	id, name,
case
	when name = 'Cosméticos e Perfumaria' then 'Sim, é Cosmético e perfumaria'
end as MENSAGEM
from e_commerce.categories

-----------------------------------------

select
	id, name,
case
	when name = 'Cosméticos e Perfumaria' then 'SIM, É COSMÉTICOS E PERFUMARIA'
	when name = 'Esporte e Lazer' then 'SIM, É LIVROS'
	else 'Filtro não encontrado'
end as MENSAGEM
from e_commerce.categories

------------------------------------------

select
	id, name,
	case
		when id between 0 and 5 then 'Primeiro verdadeiro'
		when id between 3 and 5 then 'Segundo verdadeiro'
		when id between 3 and 7 then 'Terceiro verdadeiro'
	end as CASE_2
from bigquery-public-data.thelook_ecommerce.distribution_centers;

--------------------------------------------

#### COMANDO IF ####

select
	id,	name,
	if (name = 'Cosméticos e Perfumaria', 'SIM, É COSMÉTICOS E PERFUMARIA',
	if (name = 'Livros', 'SIM, É LIVROS', 'Opção não encontrada')) as CASE1
from e_commerce.categories;

---------------------------------------------

#### COMANDO COALESCE ####

select
	id,
	first_name,
	additionals,
	coalesce (additionals, 'COMPLEMENTO NULO') as COMPLEMENTO
from
	e_commerce.customers
limit 10;


------------------------------------------------

COMANDOS "GROUP BY" E "ORDER BY"

select
	distinct status,
from
	bigquery-public-data.thelook_ecommerce.orders
	limit 10;
	
	--	OU	--

select
	status,
from
	bigquery-public-data.thelook_ecommerce.orders
group by
	status;

	--	OU	--
	
select
	status,
from
	bigquery-public-data.thelook_ecommerce.orders
group by
	1;
	
# O número "1" refere-se a primeira coluna.

-----------------------------

select
	count(distinct order_id) as NUMERO_PEDIDOS,
	date(created_at) as DIA
from
	bigquery-public-data.thelook_ecommerce.orders
group by DIA;

-----------------------------

select
	count(distinct order_id) as NUMERO_PEDIDOS,
	date(created_at) as DIA
from
	bigquery-public-data.thelook_ecommerce.orders
group by DIA
order by DIA;

-------------------------------------------

select
	count(distinct order_id) as NUMERO_PEDIDOS,
	date(created_at) as DIA
from
	bigquery-public-data.thelook_ecommerce.orders
group by DIA
# order by DIA asc
order by DIA desc
limit 30;

# "asc" --> Ordena de forma crescente
# "desc" --> Ordema de forma decrescente

--------------------------------------------

#### COMANDO JOIN ####

# A função do join é juntar informações que estão em duas ou mais tabelas diferentes. Juntamente com o "JOIN",
# devemos usar o parâmetro "ON", pois esse parâmetro possibilita relacionar tabelas pela chave.

select
	o.order_id,
	o.user_id,
	num_of_item,
	i.order_id,
	i.user_id,
sum(sale_price) as receita
from bigquery-public-data.thelook_ecommerce.orders as o
join bigquery-public-data.thelook_ecommerce.order_items as i on o.order_id = i.order_id
group by o.order_id, o.user_id, num_of_item, i.order_id, i.user_id
order by receita desc;

------------------------------------------------